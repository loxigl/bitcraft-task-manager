import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import compression from 'compression';
import dotenv from 'dotenv';

import connectDB from './config/database';
import taskRoutes from './routes/taskRoutes';
import userRoutes from './routes/userRoutes';

// ะะฐะณััะถะฐะตะผ ะฟะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั
dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// ะะพะดะบะปััะตะฝะธะต ะบ ะฑะฐะทะต ะดะฐะฝะฝัั
connectDB();

// Middleware
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" }
}));

app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true
}));

app.use(compression());
app.use(morgan('combined'));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ะะฐัััััั
app.use('/api/tasks', taskRoutes);
app.use('/api/users', userRoutes);

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'BitCraft Task Manager API ัะฐะฑะพัะฐะตั!',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// ะะฐะทะพะฒัะน ะผะฐััััั
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'ะะพะฑัะพ ะฟะพะถะฐะปะพะฒะฐัั ะฒ BitCraft Task Manager API!',
    version: '1.0.0',
    endpoints: {
      tasks: '/api/tasks',
      users: '/api/users',
      health: '/health'
    }
  });
});

// 404 ะพะฑัะฐะฑะพััะธะบ
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'Endpoint ะฝะต ะฝะฐะนะดะตะฝ'
  });
});

// ะะปะพะฑะฐะปัะฝัะน ะพะฑัะฐะฑะพััะธะบ ะพัะธะฑะพะบ
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('ะัะธะฑะบะฐ:', err);
  
  res.status(err.status || 500).json({
    success: false,
    message: err.message || 'ะะฝัััะตะฝะฝัั ะพัะธะฑะบะฐ ัะตัะฒะตัะฐ',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, () => {
  console.log(`๐ ะกะตัะฒะตั ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ API ะดะพัััะฟะตะฝ ะฟะพ ะฐะดัะตัั: http://localhost:${PORT}`);
  console.log(`๐ฅ Health check: http://localhost:${PORT}/health`);
});

export default app; 